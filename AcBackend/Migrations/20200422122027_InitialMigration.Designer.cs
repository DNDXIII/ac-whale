// <auto-generated />
using System;
using AcBackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AcBackend.Migrations
{
    [DbContext(typeof(ACContext))]
    [Migration("20200422122027_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Island", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DodoCode")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int>("EntryFeeAmount")
                        .HasColumnType("integer");

                    b.Property<int>("EntryFeeType")
                        .HasColumnType("integer");

                    b.Property<int>("Hemisphere")
                        .HasColumnType("integer");

                    b.Property<int>("MaxVisitors")
                        .HasColumnType("integer");

                    b.Property<int>("MaxVisitorsQueue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Islands");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Island");
                });

            modelBuilder.Entity("QueueUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IslandQueueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IslandQueueId");

                    b.ToTable("QueueUsers");
                });

            modelBuilder.Entity("VisitingUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IslandVisitingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IslandVisitingId");

                    b.ToTable("VisitingUsers");
                });

            modelBuilder.Entity("EventIsland", b =>
                {
                    b.HasBaseType("Island");

                    b.Property<int>("CurrentVillager")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("EventIsland");
                });

            modelBuilder.Entity("TurnipIsland", b =>
                {
                    b.HasBaseType("Island");

                    b.Property<bool>("Buying")
                        .HasColumnType("boolean");

                    b.Property<int>("CurrentPrice")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("TurnipIsland");
                });

            modelBuilder.Entity("QueueUser", b =>
                {
                    b.HasOne("Island", "IslandQueue")
                        .WithMany("VisitorsQueue")
                        .HasForeignKey("IslandQueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisitingUser", b =>
                {
                    b.HasOne("Island", "IslandVisiting")
                        .WithMany("Visitors")
                        .HasForeignKey("IslandVisitingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
